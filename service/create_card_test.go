package service_test

import (
	"errors"
	"testing"

	"github.com/asehra/bezier/mock"
	"github.com/asehra/bezier/service"
	. "github.com/smartystreets/goconvey/convey"
)

func TestCreateCard(t *testing.T) {

	Convey("Given A card creation system", t, func() {

		Convey("When a card is created", func() {
			expectedCardNumber := int64(9000000000000001)
			idGenerator := &mock.IDGenerator{Generates: expectedCardNumber}
			db := &mock.Storage{}

			Convey("Successfully", func() {
				actualCardNumber, _ := service.CreateCard(db, idGenerator)
				Convey("Returns the card number of the new card as Generated by IDGenerator", func() {
					So(actualCardNumber, ShouldEqual, expectedCardNumber)
				})

				Convey("Stores the new card on the storage with a generated ID", func() {
					So(db.StoreCardCall.Receives.Card.Number, ShouldEqual, expectedCardNumber)
				})

				Convey("The new card has 0 available balance", func() {
					So(db.StoreCardCall.Receives.Card.AvailableBalance, ShouldEqual, 0)
				})
			})

			Convey("And it fails due to storage errors", func() {
				Convey("Error is returned", func() {
					db.StoreCardCall.Returns.Error = errors.New("Unable to save")
					_, error := service.CreateCard(db, idGenerator)
					So(error, ShouldNotBeNil)
				})
			})

			Convey("Pending: When another card is created", nil)
		})
	})
}
