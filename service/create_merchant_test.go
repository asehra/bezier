package service_test

import (
	"errors"
	"testing"

	"github.com/asehra/bezier/mock"
	"github.com/asehra/bezier/service"
	. "github.com/smartystreets/goconvey/convey"
)

func TestCreateMerchant(t *testing.T) {

	Convey("Given A merchant creation system", t, func() {

		Convey("When a merchant is created", func() {
			expectedMerchantID := "M1034"
			idGenerator := &mock.MerchantIDGenerator{Generates: expectedMerchantID}
			db := &mock.Storage{}

			Convey("Successfully", func() {
				actualMerchantID, _ := service.CreateMerchant(db, idGenerator)
				Convey("Returns the merchant id of the new merchant as Generated by IDGenerator", func() {
					So(actualMerchantID, ShouldEqual, expectedMerchantID)
				})

				Convey("Stores the new merchant on the storage with a generated ID", func() {
					So(db.StoreMerchantCall.Receives.Merchant.ID, ShouldEqual, expectedMerchantID)
				})
			})

			Convey("And it fails due to storage errors", func() {
				Convey("Error is returned", func() {
					db.StoreMerchantCall.Returns.Error = errors.New("Unable to save")
					_, error := service.CreateMerchant(db, idGenerator)
					So(error, ShouldNotBeNil)
				})
			})
		})
	})
}
